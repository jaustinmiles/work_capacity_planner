// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Task {
  id              String   @id @default(uuid())
  name            String
  duration        Int
  importance      Int
  urgency         Int
  type            String
  asyncWaitTime   Int      @default(0)
  dependencies    String   @default("[]") // JSON array of task IDs
  completed       Boolean  @default(false)
  completedAt     DateTime?
  actualDuration  Int?
  notes           String?
  projectId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  project         Project? @relation(fields: [projectId], references: [id])
  scheduledTasks  ScheduledTask[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  color       String
  createdAt   DateTime @default(now())
  
  tasks       Task[]
}

model DailySchedule {
  id          String   @id @default(uuid())
  dayOfWeek   String   @unique
  startTime   String
  endTime     String
  
  meetings    Meeting[]
}

model Meeting {
  id            String   @id @default(uuid())
  name          String
  startTime     String
  endTime       String
  recurring     Boolean  @default(false)
  scheduleId    String
  
  schedule      DailySchedule @relation(fields: [scheduleId], references: [id])
}

model SequencedTask {
  id                    String   @id @default(uuid())
  name                  String
  importance            Int
  urgency               Int
  type                  String
  notes                 String?
  dependencies          String   @default("[]") // JSON array
  completed             Boolean  @default(false)
  totalDuration         Int
  criticalPathDuration  Int
  worstCaseDuration     Int
  overallStatus         String   @default("not_started")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  steps                 TaskStep[]
}

model TaskStep {
  id                String   @id @default(uuid())
  name              String
  duration          Int
  type              String
  dependsOn         String   @default("[]") // JSON array of step IDs
  asyncWaitTime     Int      @default(0)
  status            String   @default("pending")
  sequencedTaskId   String
  stepIndex         Int
  
  sequencedTask     SequencedTask @relation(fields: [sequencedTaskId], references: [id], onDelete: Cascade)
}

model ScheduledTask {
  id              String   @id @default(uuid())
  taskId          String
  scheduledDate   DateTime
  scheduledMinutes Int
  isPartial       Boolean
  isStart         Boolean
  isEnd           Boolean
  
  task            Task     @relation(fields: [taskId], references: [id])
}

model JobContext {
  id              String   @id @default(uuid())
  name            String
  description     String
  context         String   // Long-form job context description
  asyncPatterns   String   // JSON object with common async patterns
  reviewCycles    String   // JSON object with typical review times
  tools           String   // JSON array of tools/systems used
  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  contextEntries  ContextEntry[]
}

model ContextEntry {
  id            String   @id @default(uuid())
  jobContextId  String
  key           String   // e.g., "code_review_time", "ci_pipeline_duration"
  value         String   // e.g., "4-24 hours", "30-45 minutes"
  category      String   // e.g., "async_wait", "process", "tool"
  notes         String?
  createdAt     DateTime @default(now())
  
  jobContext    JobContext @relation(fields: [jobContextId], references: [id], onDelete: Cascade)
  
  @@unique([jobContextId, key])
}

model JargonEntry {
  id            String   @id @default(uuid())
  term          String   @unique
  definition    String
  category      String?  // e.g., "technical", "process", "tool", "company"
  examples      String?  // JSON array of usage examples
  relatedTerms  String?  // JSON array of related terms
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// New models for flexible work blocks

model WorkPattern {
  id            String   @id @default(uuid())
  date          String   @unique // "2025-08-07"
  isTemplate    Boolean  @default(false)
  templateName  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  blocks        WorkBlock[]
  meetings      WorkMeeting[]
  sessions      WorkSession[]
}

model WorkBlock {
  id            String   @id @default(uuid())
  patternId     String
  startTime     String   // "09:00"
  endTime       String   // "12:00"
  type          String   // "focused" | "admin" | "mixed"
  focusCapacity Int?     // Override minutes for mixed blocks
  adminCapacity Int?     // Override minutes for mixed blocks
  
  pattern       WorkPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)
  
  @@index([patternId])
}

model WorkMeeting {
  id            String   @id @default(uuid())
  patternId     String
  name          String
  startTime     String   // "14:00"
  endTime       String   // "15:00"
  type          String   // "meeting" | "break" | "personal" | "blocked"
  recurring     String   @default("none") // "none" | "daily" | "weekly"
  daysOfWeek    String?  // JSON array [1,3,5] for Mon,Wed,Fri
  
  pattern       WorkPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)
  
  @@index([patternId])
}

model WorkSession {
  id              String   @id @default(uuid())
  patternId       String
  taskId          String?
  sequencedTaskId String?
  stepId          String?
  type            String   // "focused" | "admin"
  startTime       DateTime
  endTime         DateTime?
  plannedMinutes  Int
  actualMinutes   Int?
  notes           String?
  createdAt       DateTime @default(now())
  
  pattern         WorkPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)
  
  @@index([patternId])
  @@index([taskId])
  @@index([startTime])
}